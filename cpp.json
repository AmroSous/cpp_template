{
	// @Author: Amro Sous

	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"goo": {
		"prefix": "goo",
		"body": [
		  "/**",
		  " * author: amroo sous",
		  " * date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		  "*/",
		  "#include<bits/stdc++.h>",
		  "using namespace std; ",
		  "#define nl \"\\n\"",
		  "#define YES return cout << \"YES\\n\", void()",
		  "#define NO return cout << \"NO\\n\", void()",
		  "#define all(v) v.begin(), v.end()",
		  "int const INF = 1e9 + 5;",
		  "int const MOD = 1e9 + 7;",
		  "typedef long long ll;",
		  "",
		  "void pre_calc() {}",
		  "",
		  "void solve() {",
		  "",
		  "    $0",
		  "}",
		  "",
		  "int main() {",
		  "    ios_base::sync_with_stdio(false);",
		  "    cin.tie(nullptr);",
		  "    pre_calc();"
		  "    int t = 1;",
		  "    cin >> t;",
		  "    while (t--) solve();",
		  "    return 0;",
		  "}"
		],
		"description": ""
	},

	/*
		=============================	shortcuts	==========================================
	*/

	"lop2": {
		"prefix": "lop2",
		"body": [
			"for (int i = 0; i < n; i++) {",
			"	for (int j = 0; j < m; j++) {",
			"		$1",
			"	}",
			"}",
			"",
			"$0"
		],
		"description": ""
	},

	"read": {
		"prefix": "readvec",
		"body": [
			"int n;",
			"cin >> n;",
			"",
			"vector<int> a(n);",
			"for (int i = 0; i < n; i++) cin >> a[i];",
			"$0"
		],
		"description": ""
	},

	"bis": {
		"prefix": "bis",
		"body": [
			"auto check = [&](int v) -> bool {", 
			"	$0",
			"};",
			"",
			"int l = 0, r = 1e9, mid, ans;",
			"",
			"while (l <= r)",
			"{",
			"	mid = l + (r - l) / 2;",
			"	check(mid) ? ans = mid, l = mid + 1 : r = mid - 1;"
			"}"
		],
		"description": ""
	},

	/*
		=============================	graphs	==========================================
	*/

	"gdfs": {
		"prefix": "gdfs",
		"body": [
			"int dx[] = {0, 1, 0, -1};",
			"int dy[] = {1, 0, -1, 0};",
		],
		"description": ""
	},

	"dfs": {
		"prefix": "dfs", 
		"body": [
			"auto dfs = [&](auto self, int i, int src) -> void {",
			"    $0"
			"};"
		], 
		"description": ""
	},

	"graph": {
		"prefix": "graph",
		"body": [
			"vector<vector<int>> adj(n);", 
			"",
			"for (int i = 0; i < n; i++)",
			"{",
			"    int x, y;",
			"    cin >> x >> y;",
			"    --x; --y;",
			"    adj[x].push_back(y);",
			"    adj[y].push_back(x);",
			"}",
			"",
			"$0"
		],
		"description": ""
	},

	"bipart": {
		"prefix": "bipart",
		"body": [
			"bool is_bipartite(vector<vector<int>>& adj)",
			"{",
			"	int n = adj.size(); ",
			"	vector<int> color;",
			"	color = vector<int>(n + 1, -1);",
			"	queue<pair<int, int>> q; // <v,color>",
			"	q.push({1, 0});",
			"	color[1] = 0; ",
			"	pair<int, int> p; ",
			"	while(!q.empty())",
			"	{",
			"		p = q.front(); q.pop(); ",
			"		int v = p.first, c = p.second;",
			"		for (auto ch : adj[v])",
			"		{",
			"			if (color[ch] == c) return false;" ,
			"			else if (color[ch] == -1)",
			"			{",
			"				color[ch] = c ? 0 : 1; ",
			"				q.push({ch, color[ch]});",
			"			}",
			"		}",
			"	}",
			"	return true;",
			"}"
		],
		"description": ""
	}, 

	"digkstra": {
		"prefix": "digkstra",
		"body": [
			"void digkstra(int source, vector<ll>& dist, vector<vector<pair<int, int>>>& adj)",
			"{",
			"	int n = adj.size();",,
			"	priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> que;"
			"	vector<bool> vis(n, false);",
			"	que.push({0, source});",
			"	for (int i = 0; i < n; i++) dist[i] = INF;",
			"	dist[source] = 0;",
			"",
			"	while (!que.empty()) {",
			"		auto [d, u] = que.top();",
			"		que.pop();",
			"		vis[u] = true;",
			"		ll temp;" ,
			"		for (auto& [v, w] : adj[u]) {",
			"			if (vis[v]) continue;",
			"			temp = w + d;",
			"			if (temp < dist[v]) {",
			"				dist[v] = temp;",
			"				que.push({temp, v});",
			"			}",
			"		}",
			"	}",
			"}"
		],
		"description": ""
	},

	/*
		=============================	Data Structures	==========================================
	*/

	"fenwick": {
		"prefix": "fenwick",
		"body": [
			"template <typename T>",
			"struct Fenwick {",
			" 	const int n;",
			"	std::vector<T> a;",
			"	Fenwick(int n) : n(n), a(n) {}",
			"	void add(int x, T v) {",
			"		for (int i = x + 1; i <= n; i += i & -i) {",
			"			a[i - 1] += v;",
			"		}",
			"	}",
			"	T sum(int x) { // [0, x)",
			"		T ans = 0;",
			"		for (int i = x; i > 0; i -= i & -i) {",
			"			ans += a[i - 1];",
			"		}",
			"		return ans;",
			"	}",
			"	T rangeSum(int l, int r) { // [l, r)",
			"		return sum(r) - sum(l);",
			"	}",
			"};"
		],
		"description": ""
	},

	"segtree": {
		"prefix": "segtree",
		"body": [
			"template <typename T>",
			"struct SegTree {",
			"	int N; ",
			"	SegTree(int sz) { N = sz; }",
			"	vector<T> tree(2*N);",
			"	void combie(T i, T j) {",
			"		return i + j; ",
			"	}",
			"	void build() { ",
			"		for (int i = N - 1; i > 0; --i) t[i] combine(t[i<<1], t[i<<1|1]);",
			"	}",
			"	void modify(int p, T value) {  ",
			"		for (t[p += N] = value; p > 1; p >>= 1) t[p>>1] = combine(t[p], t[p^1]);",
			"	}",
			"	int query(int l, int r) { ",
			"		T res = 0;",
			"		for (l += N, r += N; l < r; l >>= 1, r >>= 1) {",
			"			if (l&1) res = combine(res, t[l++]);",
			"			if (r&1) res = combine(res, t[--r]);",
			"		}",
			"		return res;",
			"	}",
			"};"
		],
		"description": ""
	}, 

	"dsu": {
		"prefix": "dsu",
		"body": [
			"struct DSU {",
			"	int n, comp; ",
			"	vector<int> p, rank; ",
			"	DSU(int n) { build(n); }",
			"	void build(int m)",
			"	{",
			"		n = comp = m; ",
			"		p = vector<int>(n + 1); ",
			"		rank = vector<int>(n + 1);",
			"		for (int i = 1; i <= n; i++) p[i] = i, rank[i] = 1;",
			"	}",
			"	void reset() { build(n); }",
			"	int get(int u) { return (p[u] == u ? u : p[u] = get(p[u])); }",
			"	void merge(int u, int v)",
			"	{",
			"		u = get(u); v = get(v);" ,
			"		if (u != v)",
			"		{",
			"			if (rank[u] < rank[v]) swap(u, v);",
			"			p[v] = u; ",
			"			rank[u] += rank[v];",
			"			--comp;",
			"		}",
			"	}",
			"};"
		],
		"description": ""
	},

	/*
		=============================	Math	==========================================
	*/

	"inv": {
		"prefix": "inv",
		"body": [
			"ll inv (ll v) { ",
			"	return (v <= 1 ? v : MOD - ((ll)(MOD / v) * inv(MOD % v) % MOD)); ",
			"}"
		],
		"description": ""
	},

	"factorization": {
		"prefix": "factorization",
		"body": [
			"void factorization(vector<ll>& v, ll x) {",
			"	for (ll p = 2; p*p <= x; p++)",
			"		while (x % p == 0) v.push_back(p), x /= p;", 
			"	if (x > 1) v.push_back(x);",
			"}"
		],
		"description": ""
	},

	"get_divisors": {
		"prefix": "get_divisors",
		"body": [
			"void get_divisors(vector<ll>& v, ll x) {",
			"	for (ll i = 1; i*i <= x; i++)",
			"		if (x % i == 0) {",
			"			v.push_back(i);",
			"			if (x/i != i) v.push_back(x/i);",
			"		}",
			"}"
		],
		"description": ""
	},

	"sieve": {
		"prefix": "sieve",
		"body": [
			"vector<int> pr;",
			"",
			"void sieve(int x) {",
			"	vector<bool> s(x + 1);",
			"	for (int i = 2; i <= x; i++) if (!s[i]) {",
			"		pr.push_back(i);",
			"		for (int j = i+i; j <= x; j += i) s[j] = true; ",
			"	}",
			"}"
		],
		"description": ""
	},

	/*
		=============================	Strings	==========================================
	*/

	"z_function": {
		"prefix": "z_function",
		"body": [
			"vector<int> z_function(string s) {",
			"	int n = s.size();",
			"	vector<int> z(n);",
			"	int l = 0, r = 0;",
			"	for(int i = 1; i < n; i++) {",
			"		if(i < r) {",
			"			z[i] = min(r - i, z[i - l]);",
			"		}",
			"		while(i + z[i] < n && s[z[i]] == s[i + z[i]]) {",
			"			z[i]++;",
			"		}",
			"		if(i + z[i] > r) {",
			"			l = i;",
			"			r = i + z[i];",
			"		}",
			"	}",
			"	return z;",
			"}"
		],
		"description": ""
	}
}
